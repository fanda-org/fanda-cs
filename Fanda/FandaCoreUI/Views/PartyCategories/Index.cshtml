@{
    ViewData["Title"] = "Index";
}

@section Styles {
    @*<link href="~/vendor/datatables.net-bs4/css/dataTables.bootstrap4.css" rel="stylesheet" type="text/css" />*@
    @*https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.css*@
    <link href="https://cdn.datatables.net/1.10.20/css/dataTables.bootstrap4.min.css" rel="stylesheet" type="text/css" />
    <link href="~/vendor/bootstrap4c-custom-switch/css/component-custom-switch.css" rel="stylesheet" />
}
@section Breadcrumbs {
    @{
        var breadcrumbs = new Dictionary<string, string>()
{
            {"Home","/Home" },
            {"Contact Categories","/PartyCategories" },
        };
        ViewBag.Breadcrumbs = breadcrumbs;
    }
    <ol class="breadcrumb">
        <!-- BREADCRUMB-ITEMS -->
        <partial name="_breadcrumb-items" />
        <!-- /BREADCRUMB-ITEMS -->
        <!-- BREADCRUMB-MENU -->
        <partial name="_breadcrumb-menu" />
        <!-- /BREADCRUMB-MENU -->
    </ol>
}
<form method="post">
    <div class="card rounded">
        <div class="card-header">
            <div class="row">
                <div class="col-6 mt-sm-auto mb-sm-auto">
                    <!--mt-auto mb-auto-->
                    <span class="font-sm"><i class="icon-briefcase"></i> Contact Categories</span>
                </div>
                <div class="col-6">
                    <div class="float-right">
                        <a class="btn btn-outline-primary btn-sm" data-toggle="tooltip" title="Refresh" href="#" onclick="$('#table').DataTable().ajax.reload();"><i class="icon-refresh"></i></a>
                        <a class="btn btn-primary btn-sm" href="@Url.Action("Create")" data-toggle="tooltip" title="Create New"><i class="icon-note"></i> Create New</a>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body">
            <table id="table" class="table table-sm table-align-middle table-condensed table-hover" style="width: 100%">
                <thead>
                    <tr>
                        <th>Code</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Active</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <th>Code</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Active</th>
                        <th></th>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
</form>
@section scripts {
    @*<script src="~/vendor/datatables.net/js/jquery.dataTables.js"></script>
        <script src="~/vendor/datatables.net-bs4/js/dataTables.bootstrap4.js"></script>*@
    <script src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.20/js/dataTables.bootstrap4.min.js"></script>

    <script type="text/javascript">
        $(function () {

            // Add Searchable footer
            $('#table tfoot th').each(function () {
                var title = $(this).text();
                if (title !== '') {
                    if (title == 'Active') {
                        $(this).html('<select class="form-control form-control-sm" style="width: 100%" placeholder="Search ' + title +'"> <option value="true">Active</option> <option value="false">Inactive</option> <option value="" selected>Both</option></select>');
                    }
                    else
                        $(this).html('<input type="text" class="form-control form-control-sm" style="width: 100%" placeholder="Search ' + title + '" />');
                }
            });

            $(document).ajaxSend(function (e, xhr, options) {
                if (options.type.toUpperCase() == "POST" || options.type.toUpperCase() == "PATCH") {
                    var token = $("input[name='__RequestVerificationToken']").val();
                    xhr.setRequestHeader("RequestVerificationToken", token);
                }
            });

            $('#table').on('change', 'input[type="checkbox"]', function (e) {
                //$('#table').on('click', 'input[id^=chk-]', function () {
                e.preventDefault();
                var id = $(this).attr("id").substring(4);
                var status = $(this).prop('checked');
                console.log("Active:Checkbox ", id, status);
                if (id !== '') {
                    $.ajax({
                        url: "@Url.Action("ChangeStatus")",
                        type: 'PATCH',
                        data: JSON.stringify({ id: id, active: status }),
                        contentType: "application/json; charset=utf-8",
                        success: function (res, textStatus, jqXhr) {
                            console.log('Status successfully patched');
                        },
                        error: function (res, textStatus, error) {
                            console.log("Error: ", textStatus, error);
                        }
                    });
                }
            });

            var table = $('#table').DataTable({
                autoWidth: true,
                processing: true,
                serverSide: true,
                ajax: {
                    url: "@Url.Action("GetAll")",
                    method: "GET",
                    error: function (res, textStatus, error) {
                        console.log("Error:", res, textStatus, error);
                    }
                },
                ordering: true,
                paging: true,
                order: [[0, "asc"]],
                pagingType: "full_numbers",
                pageLength: 10,
                stateSave: true,
                stateSaveParams: function (settings, data) {
                    var temp = {};
                    $('#table tfoot input').each(function (n) {
                        temp[$(this).attr('placeholder')] = this.value;
                    });
                    $('#table tfoot select').each(function (n) {
                        temp[$(this).attr('placeholder')] = this.value;
                    });
                    data.colsFilter = temp;
                },
                stateLoadParams: function (settings, data) {
                    $.each(data.colsFilter, function (key, val) {
                        if (key == 'Search Active') {
                            $('#table tfoot select[placeholder="' + key + '"]').val(val);
                        }
                        else {
                            $('#table tfoot input[placeholder="' + key + '"]').val(val);
                        }
                    });
                },
                deferRender: true,
                //scrollY: "400px",
                //scrollX: true,
                search: { caseInsensitive: true },
                columnDefs: [
                    {
                        targets: 0, data: 'Code',
                        render: function (code, type, row, meta) {
                            var catId = row.Id;
                            var link = '@Url.Action("Details", new { id = "-1" })';
                            link = link.replace("-1", catId);
                            return '<a href=' + link + '>' + code + '</a>';
                        }
                    },
                    {
                        targets: 1, data: 'Name',
                        @*render: function (name, type, row, meta) {
                            var catId = row.Id;
                            var link = '@Url.Action("Details", new { id = "-1" })';
                            link = link.replace("-1", catId);
                            return '<a href=' + link + '>' + name + '</a>';
                        }*@
                    },
                    {
                        targets: 2, data: 'Description',
                        render: function (desc, type, row, meta) {
                            return desc == undefined ? '' : desc;
                        }
                    },
                    {
                        targets: 3, data: 'Active',
                        render: function (active, type, cat, meta) {
                            //return '<span class="' + activeClass(active) + '">' + (active == 0 ? "Inactive" : "Active") + '</span>';
                            //return data == 0 ? 'Inactive' : 'Active';

                            //return '<div class="custom-control custom-checkbox">' +
                                //    '<input type="checkbox" ' + (active ? "checked" : "") + ' class="custom-control-input" id="chk-' + cat.Id + '">' +
                                //    '<label class="custom-control-label" style="cursor:pointer" for="chk-' + cat.Id + '">&nbsp;</label>'
                                //'</div>';

                            //return '<input type="checkbox" id="chk-' + cat.Id + '" ' + (active ? "checked" : "") + ' data-toggle="toggle" data-size="small" data-on="Active" data-off="Inactive" data-onstyle="primary" data-offstyle="secondary">';
                            //return '<div><label><input type="checkbox"><span class="slider"></span></label></div>';

                            //return '<div class="custom-switch custom-switch-xs">' +
                            //    '<input class="custom-switch-input" id="chk-' + cat.Id + '" ' + (active ? "checked" : "") + ' type="checkbox">' +
                            //    '<label class="custom-switch-btn" for="chk-' + cat.Id + '"></label>' +
                            //    '</div>';

                            return '<div class="custom-control custom-switch">' +
                                '<input type="checkbox" class="custom-control-input" id="chk-' + cat.Id + '" ' + (active ? "checked" : "") + ' type="checkbox">' +
                                '<label class="custom-control-label" for="chk-' + cat.Id + '"></label>' +
                            '</div>';
                        }
                    },
                    {
                        targets: 4, data: 'Id',
                        render: function (id, type, row, meta) {

                            var editLink = '@Url.Action("Edit", new { id = "-1" })';
                            var deleteLink = '@Url.Action("Delete", new { id = "-1" })';
                            editLink = editLink.replace("-1", id);
                            deleteLink = deleteLink.replace("-1", id);

                            return '<div class="btn-group" role="group">' +
                                '<a class="btn btn-sm btn-outline-primary font-weight-bold" title="Edit" data-toggle="tooltip" href=' + editLink + '><i class="icon-pencil"></i></a>' +
                                '<a class="btn btn-sm btn-outline-danger font-weight-bold" title="Delete" data-toggle="tooltip" href=' + deleteLink + '><i class="icon-trash"></i></a>' +
                                '</div>';
                        },
                        sortable: false,
                        searchable: false
                    }
                ]
            });

            // Apply the search
            table.columns().every(function () {
                var that = this;

                $('input', this.footer()).on('keyup change', function () {
                    if (that.search() !== this.value) {
                        that
                            .search(this.value, false, true, false)
                            .draw();
                    }
                });

                $('select', this.footer()).on('change', function () {
                    if (that.search() !== this.value) {
                        //var val = $.fn.dataTable.util.escapeRegex($(this).val());
                        that
                            .search(this.value, false, true, false)
                            .draw();
                    }
                });
            });

            $('body').tooltip({ selector: '[data-toggle="tooltip"]' });
            //$('[data-toggle="tooltip"]').tooltip({ container: 'body' });
        });

        function RefreshTable(tableId, urlData) {
            console.log("Refresh table started...");
            $.getJSON(urlData, null, function (json) {
                table = $(tableId).dataTable();
                oSettings = table.fnSettings();

                table.fnClearTable(this);

                for (var i = 0; i < json.aaData.length; i++) {
                    table.oApi._fnAddData(oSettings, json.aaData[i]);
                }

                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
                table.fnDraw();
            });
        }

        function activeClass(value) {
            return "badge " + (value ? "badge-success" : "badge-secondary");
        }
    </script>
}