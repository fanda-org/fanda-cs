@*@model IEnumerable<OrgYearListDto>*@

@{
    ViewData["Title"] = "Index";
}

@section styles {
    <style>
        .nav-tabs {
            margin: 0;
            margin-bottom: 0;
        }

        .modal-footer {
            padding: .75rem;
        }

        .card {
            margin-bottom: 0;
        }

        @@media screen and (min-width: 768px) {
            .modal-dialog {
                width: 700px; /* New width for default modal */
            }

            .modal-sm {
                width: 350px; /* New width for small modal */
            }
        }

        @@media screen and (min-width: 992px) {
            .modal-lg {
                width: 50%; /* New width for large modal */
                min-width: 50%;
                max-width: 90%;
                height: 600px;
                min-height: 600px;
            }
        }
    </style>
}

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Organizations</h3>
        <div class="card-options">
            <button type="button" class="btn btn-primary btn-block"
                    data-toggle="ajax-modal" data-target="#modal-edit" data-url="@Url.Action("Create")">
                <i class="fe fe-plus"></i> Create New
            </button>
        </div>
    </div>
    <div class="card-body">
        <div class="row align-items-center mb-3">
            <div class="col-auto">
                <div class="row">
                    <div class="form-inline">
                        <label class="col col-form-label">Show</label>
                        <select class="col form-control item-options">
                            <option value="5" selected>5</option>
                            <option value="10">10</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                        <label class="col col-form-label">entires</label>
                    </div>
                </div>
            </div>
            @*<div class="col text-center">
                    <button type="button" class="btn btn-secondary" id="prevPage1"><i class="fe fe-arrow-left"></i></button>
                    <button type="button" class="btn btn-secondary" id="nextPage1"><i class="fe fe-arrow-right"></i></button>
                </div>*@
            <div class="col text-right float-right">
                <form>
                    <div class="input-group">
                        <input type="search" class="form-control" placeholder="Search&hellip;" tabindex="1"
                               id="search" name="search" value=@ViewBag.Search />
                        <span class="input-group-append">
                            <button type="submit" id="searchButton" class="btn btn-secondary"><i class="fe fe-search"></i></button>
                        </span>
                    </div>
                </form>
            </div>
        </div>

        <div class="row align-items-center">
            <div class="col" id="list-placeholder">
                @*@Html.RenderPartial("_OrganizationListItem", Model);*@
            </div>
        </div>
    </div>
    <div class="card-footer">
        <div class="row">
            <div class="col">
                <span class="item-text">Entries 1-1 of 1</span>
            </div>
            <div class="col text-center">
                <button type="button" class="btn btn-secondary" id="prevPage2"><i class="fe fe-arrow-left"></i></button>
                <button type="button" class="btn btn-secondary" id="nextPage2"><i class="fe fe-arrow-right"></i></button>
            </div>
            <div class="col text-right">
                <span class="page-text">Page 1 of 1</span>
            </div>
        </div>
    </div>
</div>

<!-- Modal placeholder -->
<div id="modal-placeholder"></div>

@section scripts {
    <script type="text/javascript">
        require(['jquery', 'jsgrid', 'bootbox', 'toastr'],
            function ($, _, bootbox, toastr, _) {
                var salutations = ["Mr.", "Mrs.", "Ms."];
                var addrTypes = [];
                var contacts = [];
                var addresses = [];

                var searchText = "";
                var pageIndex = 1;
                var pageSize = 5;
                var pageCount = 1;

                $(document).ready(function () {
                    var listPlaceholderElement = $("#list-placeholder");
                    var modalPlaceholderElement = $('#modal-placeholder');

                    // Send AntiforgeryToken to controller for POST and PATCH methods
                    $(document).ajaxSend(function (e, xhr, options) {
                        var optionType = options.type.toUpperCase();
                        if (optionType != "GET") {//optionType == "POST" || optionType == "PATCH" || optionType == "PUT" || optionType="DELETE")
                            let token = $("input[name='__RequestVerificationToken']").val();
                            xhr.setRequestHeader("RequestVerificationToken", token);
                        }
                    });

                    // listOrgs function
                    function listOrgs() {
                        // debugger;
                        //if (pageIndex > pageCount)
                        //    pageIndex = pageCount;
                        $.get('@Url.Action("List")', { search: searchText, pageIndex: pageIndex, pageSize: pageSize })
                            .done(function (data) {
                                listPlaceholderElement.html(data);

                                // debugger;
                                var firstRow = parseInt($(".page-info > #FirstRowOnPage").val());
                                var lastRow = parseInt($(".page-info > #LastRowOnPage").val());
                                var itemsCount = parseInt($(".page-info > #ItemsCount").val());
                                pageIndex = parseInt($(".page-info > #Page").val());
                                pageCount = parseInt($(".page-info > #PageCount").val());
                                $(".item-text").text("Entries " + firstRow + "-" + lastRow + " of " + itemsCount);
                                $(".page-text").text("Page " + pageIndex + " of " + pageCount);
                            });
                    };
                    listOrgs();

                    // Search
                    $("#searchButton").click(function (event) {
                        event.preventDefault();
                        //pageIndex = 1;
                        searchText = $('#search').val();
                        listOrgs();
                    });

                    // Item options
                    $(".item-options").change(function () {
                        //pageIndex = 1;
                        pageSize = this.value;
                        listOrgs();
                    });

                    $("#prevPage1, #prevPage2").click(function (event) {
                        event.preventDefault();
                        if (pageIndex > 1) {
                            pageIndex -= 1;
                            listOrgs();
                        } else {
                            pageIndex = 1;
                            // disable previous button
                        }
                    });
                    $("#nextPage1, #nextPage2").click(function (event) {
                        event.preventDefault();
                        if (pageIndex < pageCount) {
                            pageIndex += 1;
                            listOrgs();
                        } else {
                            pageIndex = 1;
                            // disable next button
                        }
                    });

                    // Invoke Edit Modal on click of Create New/Edit button
                    $(document).on('click', 'button[data-toggle="ajax-modal"]', function (event) {
                        event.preventDefault();
                        var url = $(this).data('url');
                        var orgId = $(this).data('id');
                        $.get(url)
                            .done(function (data) {
                                // debugger;
                                if (orgId) {
                                    var childUrl = "@Url.Action("GetChildren", new { id = -1 })".replace("-1", orgId);
                                    $.get(childUrl)
                                        .done(function (childData) {
                                            // console.log(childData);
                                            contacts = childData.contacts;
                                            addresses = childData.addresses;
                                            modalPlaceholderElement.html(data);
                                            createContactGrid();
                                            createAddressGrid();
                                            modalPlaceholderElement.find('.modal').modal('show');
                                        });
                                } else {
                                    contacts = [];
                                    addresses = [];
                                    modalPlaceholderElement.html(data);
                                    createContactGrid();
                                    createAddressGrid();
                                    modalPlaceholderElement.find('.modal').modal('show');
                                }
                            });
                    });

                    // Delete
                    listPlaceholderElement.on('click', '#delete', function (event) {
                        event.preventDefault();
                        var url = $(this).data('url');

                        bootbox.confirm({
                            title: "Delete organization?",
                            message: "Are you sure you want to <em>delete</em> this organization?<br>Once deleted, you will not be able to recover!",
                            closeButton: true,
                            buttons: {
                                cancel: {
                                    label: 'No',
                                    className: 'btn-secondary'
                                },
                                confirm: {
                                    label: 'Yes',
                                    className: 'btn-danger'
                                }
                            },
                            callback: function (yes) {
                                if (yes) {
                                    //args.item.deleteConfirmed = true;
                                    //$grid.jsGrid('deleteItem', args.item); //call deleting once more in callback
                                    $.post(url)
                                        .done(function (_) {
                                            listOrgs();
                                        });
                                }
                                //$row.toggleClass("highlight");
                            }
                        });
                    });

                    // Next and previous tabs for Edit Modal
                    modalPlaceholderElement.on('click', '.btnNext', function (event) {
                        event.preventDefault();
                        var active = $('.nav-tabs > .nav-item > .active').parent();
                        active.next('li').find('a').trigger('click');
                        $('#modal-edit').modal('handleUpdate');
                    });
                    modalPlaceholderElement.on('click', '.btnPrev', function (event) {
                        event.preventDefault();
                        var active = $('.nav-tabs > .nav-item > .active').parent();
                        active.prev('li').find('a').trigger('click');
                        $('#modal-edit').modal('handleUpdate');
                    });

                    // Save
                    // Attach click event handler to an element
                    // which is located inside #modal-placeholder
                    // and has data-save attribute equal to modal
                    modalPlaceholderElement.on('click', '[data-save="modal"]', function (event) {
                        // debugger;
                        event.preventDefault();

                        var form = $(this).parents('.modal').find('form');
                        var actionUrl = form.attr('action');
                        var formArray = form.serializeArray();

                        var activeValue = $('#Active:checked').val();
                        var dataToSend = objectifyForm(formArray);
                        dataToSend.Active = activeValue;
                        dataToSend.contacts = contacts;
                        dataToSend.addresses = addresses;

                        $.post(actionUrl, dataToSend)
                            .done(function (data) {
                                // debugger;
                                var newBody = $('.modal-body', data);
                                modalPlaceholderElement.find('.modal-body').replaceWith(newBody);

                                // find IsValid input field and check it's value
                                // if it's valid then hide modal window
                                var isValid = newBody.find('[name="IsValid"]').val() == 'True';
                                if (isValid) {
                                    modalPlaceholderElement.find('.modal').modal('hide');
                                    listOrgs();
                                    toastr.success("Organization saved successfully!", "Success");
                                } else {
                                    $('[href="#tabs-general"]').click();
                                    createContactGrid();
                                    createAddressGrid();
                                }
                            })
                            .fail(function (error) {
                                // debugger;
                                console.log("Error on save organization", error);
                                let messages = $.map(error.responseJSON, function (msg) {
                                    return msg + "!";
                                });
                                toastr.warning(messages.join("<br>"), "Warning");
                            });
                    });

                    @*var addrTypes2 = JSON.parse('@Html.GetEnumSelectList<AddressType>()');*@
                    $.get('@Url.Action("GetAddressTypes", "Enums")', function (data) {
                        // debugger;
                        addrTypes = data;
                    });
                });

                function createContactGrid() {
                    // jsGrid - Contacts
                    var $gridContacts = $("#jsgrid-contacts").jsGrid({
                        height: "auto",  // "296px"
                        width: "100%",

                        //heading: true,
                        //autoload: true,

                        pagerFormat: "Pages: {pages} &nbsp;&nbsp;|&nbsp;&nbsp; Rows: {itemCount}",
                        // "Pages: {first} {prev} {pages} {next} {last} &nbsp;&nbsp; {pageIndex} of {pageCount}"
                        pageSize: 5,
                        pageButtonCount: 3,
                        paging: true,
                        //pageLoading: true,
                        filtering: true,
                        sorting: true,

                        inserting: true,
                        editing: true,
                        selecting: true,

                        noDataContent: "No contacts",

                        data: contacts,

                        confirmDeleting: false,
                    @* deleteConfirm: function () {
                        return "Do you really want to delete the category?";
                    },*@

                        invalidNotify: function (args) {
                            let messages = $.map(args.errors, function (error) {
                                return error.message + "!";
                            });
                            console.log("invalidNotify", messages);
                            toastr.warning(messages.join("<br>"), "Warning");
                        },

                        onError: function (error) {
                            console.log("onError", error);
                            let messages = $.map(error.args[0].responseJSON, function (msg) {
                                return msg + "!";
                            });
                            toastr.warning(messages.join("<br>"), "Warning");
                        },

                        onItemDeleting: function (args) {
                            let $row = this.rowByItem(args.item),
                                selectedRow = $gridContacts.find('table tr.highlight');
                            if (selectedRow.length) {
                                selectedRow.toggleClass('highlight');
                            };
                            $row.toggleClass("highlight");

                            //console.log(args);
                            if (!args.item.deleteConfirmed) { // custom property for confirmation
                                args.cancel = true; // cancel deleting

                                bootbox.confirm({
                                    title: "Delete category?",
                                    message: "Are you sure you want to <em>delete</em> this contact?<br>Once deleted, you will not be able to recover!",
                                    closeButton: true,
                                    buttons: {
                                        cancel: {
                                            label: 'No',
                                            className: 'btn-secondary'
                                        },
                                        confirm: {
                                            label: 'Yes',
                                            className: 'btn-danger'
                                        }
                                    },
                                    callback: function (yes) {
                                        if (yes) {
                                            args.item.deleteConfirmed = true;
                                            $gridContacts.jsGrid('deleteItem', args.item); //call deleting once more in callback
                                        }
                                        $row.toggleClass("highlight");
                                    }
                                });
                            }
                        },

                        fields: [
                            {
                                name: "salutation", type: "select", title: "Salutation", width: 100, validate: "required",
                                items: salutations
                            },
                            { name: "firstName", type: "text", title: "First Name", width: 200, validate: "required" },
                            { name: "lastName", type: "text", title: "Last Name", width: 200, validate: "required" },
                            { name: "designation", type: "text", title: "Designation", width: 150 },
                            { name: "department", type: "text", title: "Department", width: 150 },
                            { name: "email", type: "text", title: "Email", width: 200 },
                            { name: "workPhone", type: "text", title: "Work Phone", width: 150 },
                            { name: "mobile", type: "text", title: "Mobile", width: 150 },
                            {
                                name: "isPrimary", type: "checkbox", title: "Primary?", sorting: false, width: 100,
                                insertTemplate: function () {
                                    let input = this.__proto__.insertTemplate.call(this); //original input
                                    input.prop('checked', true);
                                    //input.prop('disabled', 'disabled');
                                    return input;
                                }
                            },
                            { name: "id", visible: false, width: 0 },
                            { type: "control", width: 100 }
                        ]
                    });
                    $gridContacts.find(".jsgrid-mode-button").click();

                }

                function createAddressGrid() {
                    // jsGrid - Addresses
                    var $gridAddresses = $("#jsgrid-addresses").jsGrid({
                        height: "auto",  // "296px"
                        width: "100%",

                        //heading: true,
                        //autoload: true,

                        pagerFormat: "Pages: {pages} &nbsp;&nbsp;|&nbsp;&nbsp; Rows: {itemCount}",
                        // "Pages: {first} {prev} {pages} {next} {last} &nbsp;&nbsp; {pageIndex} of {pageCount}"
                        pageSize: 5,
                        pageButtonCount: 3,
                        paging: true,
                        //pageLoading: true,
                        filtering: true,
                        sorting: true,

                        inserting: true,
                        editing: true,
                        selecting: true,

                        noDataContent: "No addresses",

                        data: addresses,

                        confirmDeleting: false,

                        invalidNotify: function (args) {
                            let messages = $.map(args.errors, function (error) {
                                return error.message + "!";
                            });
                            console.log("invalidNotify", messages);
                            toastr.warning(messages.join("<br>"), "Warning");
                        },

                        onError: function (error) {
                            console.log("onError", error);
                            let messages = $.map(error.args[0].responseJSON, function (msg) {
                                return msg + "!";
                            });
                            toastr.warning(messages.join("<br>"), "Warning");
                        },

                        onItemDeleting: function (args) {
                            let $row = this.rowByItem(args.item),
                                selectedRow = $gridAddresses.find('table tr.highlight');
                            if (selectedRow.length) {
                                selectedRow.toggleClass('highlight');
                            };
                            $row.toggleClass("highlight");

                            //console.log(args);
                            if (!args.item.deleteConfirmed) { // custom property for confirmation
                                args.cancel = true; // cancel deleting

                                bootbox.confirm({
                                    title: "Delete category?",
                                    message: "Are you sure you want to <em>delete</em> this address?<br>Once deleted, you will not be able to recover!",
                                    closeButton: true,
                                    buttons: {
                                        cancel: {
                                            label: 'No',
                                            className: 'btn-secondary'
                                        },
                                        confirm: {
                                            label: 'Yes',
                                            className: 'btn-danger'
                                        }
                                    },
                                    callback: function (yes) {
                                        if (yes) {
                                            args.item.deleteConfirmed = true;
                                            $gridAddresses.jsGrid('deleteItem', args.item); //call deleting once more in callback
                                        }
                                        $row.toggleClass("highlight");
                                    }
                                });
                            }
                        },

                        fields: [
                            { name: "attention", type: "text", title: "Attention", width: 100, validate: "required" },
                            { name: "addressLine1", type: "text", title: "Address Line 1", width: 200, validate: "required" },
                            { name: "addressLine2", type: "text", title: "Address Line 2", width: 200 },
                            { name: "city", type: "text", title: "City", width: 100 },
                            { name: "state", type: "text", title: "State", width: 100 },
                            { name: "country", type: "text", title: "Country", width: 100 },
                            { name: "postalCode", type: "text", title: "Postal Code", width: 100 },
                            { name: "phone", type: "text", title: "Phone", width: 150 },
                            { name: "fax", type: "text", title: "Fax", width: 100 },
                            {
                                name: "addressType", type: "select", title: "Addr. Type", width: 100,
                                items: addrTypes, valueField: "text", textField: "displayText"
                            },
                            { name: "id", visible: false, width: 0 },
                            { type: "control", width: 100 }
                        ]
                    });
                    $gridAddresses.find(".jsgrid-mode-button").click();
                }
            });
    </script>
}
