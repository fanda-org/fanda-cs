@model IEnumerable<OrgYearListDto>

@{
    ViewData["Title"] = "Index";
}

@section styles {
    <style>
        .nav-tabs {
            margin: 0;
            margin-bottom: 0;
        }

        .modal-footer {
            padding: .75rem;
        }

        .card {
            margin-bottom: 0;
        }

        @@media screen and (min-width: 768px) {
            .modal-dialog {
                width: 700px; /* New width for default modal */
            }

            .modal-sm {
                width: 350px; /* New width for small modal */
            }
        }

        @@media screen and (min-width: 992px) {
            .modal-lg {
                width: 50%; /* New width for large modal */
                min-width: 50%;
                max-width: 90%;
                height: 600px;
                min-height: 600px;
            }
        }
    </style>
}

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Organizations</h3>
    </div>
    <div class="card-body">
        <div class="row align-items-center mb-3">
            <div class="col">
                <form asp-action="Index" method="get">
                    <div class="input-group">
                        <input type="search" class="form-control" placeholder="Search&hellip;" tabindex="1"
                               id="search" name="search" value=@ViewBag.Search />
                        <span class="input-group-append">
                            <button type="submit" id="searchOrg" class="btn btn-secondary">
                                <i class="fe fe-search"></i>
                            </button>
                        </span>
                    </div>
                </form>
            </div>
            <div class="col-2 text-center">
                <a href="#" class="btn btn-secondary" id="leftButton"><i class="fe fe-arrow-left"></i>&nbsp;</a>
            </div>
            <div class="col-2 text-center">
                <a href="#" class="btn btn-secondary" id="rightButton"><i class="fe fe-arrow-right"></i>&nbsp;</a>
            </div>
            <div class="col-3">
                <button type="button" class="btn btn-primary btn-block"
                        data-toggle="ajax-modal" data-target="#modal-edit" data-url="@Url.Action("Create")">
                    <i class="fe fe-plus"></i> Create New
                </button>
            </div>
        </div>

        <div class="row align-items-center">
            <div class="col">
                @foreach (var org in Model)
                {
                    await Html.RenderPartialAsync("_OrganizationListItem", org);
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal placeholder -->
<div id="modal-placeholder"></div>

@section scripts {
    <script type="text/javascript">
        require(['jquery', 'jsgrid', 'bootbox', 'toastr'],
            function ($, _, bootbox, toastr, _) {
                var contacts = [];
                var addresses = [];

                $(document).ready(function () {
                    // Send AntiforgeryToken to controller for POST and PATCH methods
                    $(document).ajaxSend(function (e, xhr, options) {
                        var optionType = options.type.toUpperCase();
                        if (optionType != "GET") {//optionType == "POST" || optionType == "PATCH" || optionType == "PUT" || optionType="DELETE")
                            let token = $("input[name='__RequestVerificationToken']").val();
                            xhr.setRequestHeader("RequestVerificationToken", token);
                        }
                    });

                    // Invoke Edit Modal on click Create New/Edit button
                    var placeholderElement = $('#modal-placeholder');
                    $('button[data-toggle="ajax-modal"]').click(function (event) {
                        event.preventDefault();
                        var url = $(this).data('url');
                        $.get(url)
                            .done(function (data) {
                                placeholderElement.html(data);
                                createContactGrid();
                                createAddressGrid();
                                placeholderElement.find('.modal').modal('show');
                            });
                    });

                    // Next and previous button for Edit Modal
                    $(document).on('click', '.btnNext', function (event) {
                        event.preventDefault();
                        var active = $('.nav-tabs > .nav-item > .active').parent();
                        active.next('li').find('a').trigger('click');
                        $('#modal-edit').modal('handleUpdate');
                    });
                    $(document).on('click', '.btnPrev', function (event) {
                        event.preventDefault();
                        var active = $('.nav-tabs > .nav-item > .active').parent();
                        active.prev('li').find('a').trigger('click');
                        $('#modal-edit').modal('handleUpdate');
                    });

                    // Save
                    // Attach click event handler to an element
                    // which is located inside #modal-placeholder
                    // and has data-save attribute equal to modal
                    placeholderElement.on('click', '[data-save="modal"]', function (event) {
                        event.preventDefault();

                        var form = $(this).parents('.modal').find('form');
                        var actionUrl = form.attr('action');
                        var dataToSend = form.serialize();

                        $.post(actionUrl, dataToSend)
                            .done(function (data) {
                                //debugger;
                                var newBody = $('.modal-body', data);
                                placeholderElement.find('.modal-body').replaceWith(newBody);

                                // find IsValid input field and check it's value
                                // if it's valid then hide modal window
                                var isValid = newBody.find('[name="IsValid"]').val() == 'True';
                                if (isValid) {
                                    toastr.warning("Organization saved successfully!", "Success");
                                    placeholderElement.find('.modal').modal('hide');
                                    $("#searchOrg").click();
                                }

                                //placeholderElement.find('.modal').modal('hide');
                                //$("#searchOrg").click();
                            })
                            .fail(function (error) {
                                console.log("Error on save organization", error);
                                let messages = $.map(error.responseJSON, function (msg) {
                                    return msg + "!";
                                });
                                toastr.warning(messages.join("<br>"), "Warning");
                            });
                    });

                    // Attach a submit handler to the form
                    //$("#saveOrg").click(function (event) {
                    //    // debugger;
                    //    // Stop form from submitting normally
                    //    event.preventDefault();

                    //    // Get some values from elements on the page:
                    //    var form = $("#orgForm"),
                    //        url = form.attr("action");
                    //    const formData = new FormData(form[0]);

                    //    // Send the data using post
                    //    $.ajax(url, {
                    //        type: "POST",
                    //        processData: false,
                    //        contentType: false,
                    //        data: formData
                    //    })
                    //        .done(function (data) {
                    //            $("#modal-edit").modal('hide');
                    //            $("#searchOrg").click();
                    //        })
                    //        .fail(function (error) {
                    //            console.log("Error on save organization", error);
                    //            let messages = $.map(error.responseJSON, function (msg) {
                    //                return msg + "!";
                    //            });
                    //            toastr.warning(messages.join("<br>"), "Warning");
                    //        });
                    //});
                });

                function createContactGrid() {
                    // jsGrid - Contacts
                    var $gridContacts = $("#jsgrid-contacts").jsGrid({
                        height: "296px",  // "450"
                        width: "100%",

                        //heading: true,
                        //autoload: true,

                        pagerFormat: "Pages: {pages} &nbsp;&nbsp;|&nbsp;&nbsp; Rows: {itemCount}",
                        // "Pages: {first} {prev} {pages} {next} {last} &nbsp;&nbsp; {pageIndex} of {pageCount}"
                        pageSize: 5,
                        pageButtonCount: 5,
                        paging: true,
                        //pageLoading: true,
                        filtering: true,
                        sorting: true,

                        inserting: true,
                        editing: true,
                        selecting: true,

                        noDataContent: "No contacts",

                        data: contacts,

                        confirmDeleting: false,
                    @* deleteConfirm: function () {
                        return "Do you really want to delete the category?";
                    },*@

                        invalidNotify: function (args) {
                            let messages = $.map(args.errors, function (error) {
                                return error.message + "!";
                            });
                            console.log("invalidNotify", messages);
                            toastr.warning(messages.join("<br>"), "Warning");
                        },

                        onError: function (error) {
                            console.log("onError", error);
                            let messages = $.map(error.args[0].responseJSON, function (msg) {
                                return msg + "!";
                            });
                            toastr.warning(messages.join("<br>"), "Warning");
                        },

                        onItemDeleting: function (args) {
                            let $row = this.rowByItem(args.item),
                                selectedRow = $gridContacts.find('table tr.highlight');
                            if (selectedRow.length) {
                                selectedRow.toggleClass('highlight');
                            };
                            $row.toggleClass("highlight");

                            //console.log(args);
                            if (!args.item.deleteConfirmed) { // custom property for confirmation
                                args.cancel = true; // cancel deleting

                                bootbox.confirm({
                                    title: "Delete category?",
                                    message: "Are you sure you want to <em>delete</em> this contact?<br>Once deleted, you will not be able to recover!",
                                    closeButton: true,
                                    buttons: {
                                        cancel: {
                                            label: 'No',
                                            className: 'btn-secondary'
                                        },
                                        confirm: {
                                            label: 'Yes',
                                            className: 'btn-danger'
                                        }
                                    },
                                    callback: function (yes) {
                                        if (yes) {
                                            args.item.deleteConfirmed = true;
                                            $gridContacts.jsGrid('deleteItem', args.item); //call deleting once more in callback
                                        }
                                        $row.toggleClass("highlight");
                                    }
                                });
                            }
                        },

                        fields: [
                            { name: "salutation", type: "text", title: "Salutation", width: 100, validate: "required" },
                            { name: "firstName", type: "text", title: "First Name", width: 200, validate: "required" },
                            { name: "lastName", type: "text", title: "Last Name", width: 200, validate: "required" },
                            { name: "designation", type: "text", title: "Designation", width: 150 },
                            { name: "department", type: "text", title: "Department", width: 150 },
                            { name: "email", type: "text", title: "Email", width: 200 },
                            { name: "workPhone", type: "text", title: "Work Phone", width: 150 },
                            { name: "mobile", type: "text", title: "Mobile", width: 150 },
                            {
                                name: "isPrimary", type: "checkbox", title: "Primary?", sorting: false, width: 100,
                                insertTemplate: function () {
                                    let input = this.__proto__.insertTemplate.call(this); //original input
                                    input.prop('checked', true);
                                    input.prop('disabled', 'disabled');
                                    return input;
                                }
                            },
                            { name: "id", visible: false, width: 0 },
                            { type: "control", width: 100 }
                        ]
                    });
                    $gridContacts.find(".jsgrid-mode-button").click();

                }

                function createAddressGrid() {
                    // jsGrid - Addresses
                    var $gridAddresses = $("#jsgrid-addresses").jsGrid({
                        height: "296px",  // "450"
                        width: "100%",

                        //heading: true,
                        //autoload: true,

                        pagerFormat: "Pages: {pages} &nbsp;&nbsp;|&nbsp;&nbsp; Rows: {itemCount}",
                        // "Pages: {first} {prev} {pages} {next} {last} &nbsp;&nbsp; {pageIndex} of {pageCount}"
                        pageSize: 5,
                        pageButtonCount: 5,
                        paging: true,
                        //pageLoading: true,
                        filtering: true,
                        sorting: true,

                        inserting: true,
                        editing: true,
                        selecting: true,

                        noDataContent: "No addresses",

                        data: addresses,

                        confirmDeleting: false,

                        invalidNotify: function (args) {
                            let messages = $.map(args.errors, function (error) {
                                return error.message + "!";
                            });
                            console.log("invalidNotify", messages);
                            toastr.warning(messages.join("<br>"), "Warning");
                        },

                        onError: function (error) {
                            console.log("onError", error);
                            let messages = $.map(error.args[0].responseJSON, function (msg) {
                                return msg + "!";
                            });
                            toastr.warning(messages.join("<br>"), "Warning");
                        },

                        onItemDeleting: function (args) {
                            let $row = this.rowByItem(args.item),
                                selectedRow = $gridAddresses.find('table tr.highlight');
                            if (selectedRow.length) {
                                selectedRow.toggleClass('highlight');
                            };
                            $row.toggleClass("highlight");

                            //console.log(args);
                            if (!args.item.deleteConfirmed) { // custom property for confirmation
                                args.cancel = true; // cancel deleting

                                bootbox.confirm({
                                    title: "Delete category?",
                                    message: "Are you sure you want to <em>delete</em> this address?<br>Once deleted, you will not be able to recover!",
                                    closeButton: true,
                                    buttons: {
                                        cancel: {
                                            label: 'No',
                                            className: 'btn-secondary'
                                        },
                                        confirm: {
                                            label: 'Yes',
                                            className: 'btn-danger'
                                        }
                                    },
                                    callback: function (yes) {
                                        if (yes) {
                                            args.item.deleteConfirmed = true;
                                            $gridAddresses.jsGrid('deleteItem', args.item); //call deleting once more in callback
                                        }
                                        $row.toggleClass("highlight");
                                    }
                                });
                            }
                        },

                        fields: [
                            { name: "attention", type: "text", title: "Attention", width: 100, validate: "required" },
                            { name: "addressLine1", type: "text", title: "Address Line 1", width: 200, validate: "required" },
                            { name: "addressLine2", type: "text", title: "Address Line 2", width: 200 },
                            { name: "city", type: "text", title: "City", width: 100 },
                            { name: "state", type: "text", title: "State", width: 100 },
                            { name: "country", type: "text", title: "Country", width: 100 },
                            { name: "postalCode", type: "text", title: "Postal Code", width: 100 },
                            { name: "phone", type: "text", title: "Phone", width: 100 },
                            { name: "fax", type: "text", title: "Fax", width: 100 },
                            { name: "addressType", type: "text", title: "Addr. Type", width: 100 },
                            { name: "id", visible: false, width: 0 },
                            { type: "control", width: 100 }
                        ]
                    });
                    $gridAddresses.find(".jsgrid-mode-button").click();
                }
            });
    </script>
}
