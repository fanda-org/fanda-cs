@model PartyDto
@{
    ViewData["Title"] = "Edit";

    //if (Model.Contacts.Count == 0)
    //{
    //    Model.Contacts.Add(new ContactViewModel());
    //}
    var contacts = Json.Serialize(Model.Contacts);
}

<form asp-action="Edit">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title"><i class="fe fe-users"></i> Business Contacts - @ViewBag.Mode</h3>
        </div>
        <div class="m-3">
            <partial name="_partyEdit" model="Model" />
        </div>
        <div class="card-footer">
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group mb-0">
                        <a class="btn btn-secondary" data-toggle="tooltip" title="Back to list" asp-action="Index"><i class="fe fe-list"></i> Back</a>
                        @if (ViewBag.Mode != "Create")
                        {
                            <button type="button" value="Delete" data-toggle="tooltip" title="Delete" class="btn btn-outline-danger" id="btnDelete"><i class="fe fe-trash"></i> Delete</button>
                        }
                        <div class="float-right">
                            @if (ViewBag.Mode == "Create" || ViewBag.Mode == "Edit")
                            {
                                <button type="button" value="Reset" data-toggle="tooltip" title="Reset to original values" class="btn btn-secondary" id="btnCancel"><i class="fe fe-x"></i> Reset</button>
                                <button type="submit" value="Save" data-toggle="tooltip" title="Save changes" class="btn btn-primary"><i class="fe fe-check"></i> Save</button>
                            }
                            @if (ViewBag.Mode == "Details")
                            {
                                <button type="button" value="Edit" data-toggle="tooltip" title="Edit" class="btn btn-primary" id="btnEdit"><i class="fe fe-edit"></i> Edit</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <script type="text/javascript">
        require(['jquery', 'datatables', 'sweetalert2', 'select2'], function ($, dataTable, Swal, select2) {
            $(document).ajaxSend(function (e, xhr, options) {
                if (options.type.toUpperCase() == "POST") {
                    var token = $("input[name='__RequestVerificationToken']").val();
                    xhr.setRequestHeader("RequestVerificationToken", token);
                }
            });

            $.fn.resetValidation = function () {
                var $form = this.closest('form');

                //reset jQuery Validate's internals
                $form.validate().resetForm();

                //reset unobtrusive validation summary, if it exists
                $form.find("[data-valmsg-summary=true]")
                    .removeClass("validation-summary-errors")
                    .addClass("validation-summary-valid")
                    .find("ul").empty();

                //reset unobtrusive field level, if it exists
                $form.find("[data-valmsg-replace]")
                    .removeClass("field-validation-error")
                    .addClass("field-validation-valid")
                    .empty();

                return $form;
            };

            $('body').tooltip({ selector: '[data-toggle="tooltip"]' });
            //$.fn.select2.defaults.set("theme", "bootstrap");
            $('#PartyType').select2({ theme: 'bootstrap4' });
            $('#CategoryId').select2({ theme: 'bootstrap4' });
            $('#PaymentTerm').select2({ theme: 'bootstrap4' });
            $('#contacts').DataTable();

            /*
            * Contacts
            */
            $(document).ready(function () {
                $('#btnEdit').on('click', function () {
                    var id = "@Model.PartyId";
                    var url = '@Url.Action("Edit", new { id = "-1" })';
                    url = url.replace('-1', id);
                    window.location = url;
                });

                $("#btnDelete").on('click', function () {
                    Swal.fire({
                        title: "Are you sure?",
                        text: "Do you want to delete this Contact? Once deleted, you will not be able to recover!",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonText: 'Yes, delete it!',
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        reverseButtons: true
                    }).then((result) => {
                        if (result.value) {
                            //var dataType = 'application/x-www-form-urlencoded; charset=utf-8';
                            //var data = $('form').serialize();
                            $.ajax({
                                url: "@Url.Action("DeleteConfirmed")",
                                type: 'POST',
                                //dataType: 'json',
                                //contentType: dataType,
                                data: { id: "@Model.PartyId" },
                                success: function (data) {
                                    if (data.ok) {
                                        console.log('Deleted successfully!');
                                        swal({
                                            title: "Deleted!", text: "Contact has been deleted!", icon: "success"
                                        })
                                            .then(() => {
                                                window.location = data.url;
                                            });
                                    }
                                    else {
                                        swal("Error! Error while deleting contact: " + data.message, {
                                            icon: "error",
                                        });
                                    }
                                },
                                error: function (res, textStatus, error) {
                                    console.log("Error: ", res, textStatus, error);
                                    swal("Failed! Error while deleting contact: " + error, {
                                        icon: "error",
                                    });
                                }
                            });
                        } else {
                            swal({ title: "Cancelled!", text: "Contact deletion cancelled!", icon: "info" });
                        }
                    });
                });

                $('#btnCancel').on('click', function () {
                    var active = '@Model.Active' == 'True' ? true : false;

                    $('#Code').val('@Model.Code');
                    $('#Name').val('@Model.Name');
                    $('#RegdNum').val('@Model.RegdNum');
                    $('#Active').prop('checked', active);
                    $('#Code').focus();
                });

                $(document).on("click", "#btnAddContact", function () {
                    var nextIndex = $("table#contacts tbody tr").length;
                    $.ajax({
                        url: '@Url.Action("AddContact")',
                        type: 'POST',
                        data: { index: nextIndex },
                        success: function (results) {
                            $("table#contacts tbody").append(results);
                        }
                    });

                    //$('form').unbind();
                    //$('form').data('validator', null);
                    //$.validator.unobtrusive.parse(document);

                    // Find the affected form
                    var $form = $('table#contacts tbody tr:last').closest('form');  //$tr.closest("FORM");
                    console.log($form);

                    // Unbind existing validation
                    $form.unbind();
                    $form.data("validator", null);

                    // Check document for changes
                    $.validator.unobtrusive.parse(document);

                    // Re add validation with changes
                    $form.validate($form.data("unobtrusiveValidation").options);
                });

                $("table#contacts").on("click", "#btnRemoveContact", function () {
                    $(this).closest('tr').hide();
                    $(this).prev('input').val('true');
                });
            });
        });
    </script>

    <script>
        require(['jquery', 'jsgrid', 'sweetalert2'], function ($, jsGrid, Swal) {
            //debugger;
            $(document).ajaxSend(function (e, xhr, options) {
                if (options.type.toUpperCase() == "POST" || options.type.toUpperCase() == "PATCH") {
                    var token = $("input[name='__RequestVerificationToken']").val();
                    xhr.setRequestHeader("RequestVerificationToken", token);
                }
            });

            var $grid = $("#jsGrid").jsGrid({
                height: "auto",
                width: "100%",
                
                heading: true,
                //filtering: true,

                inserting: true,
                editing: true,
                //selecting: true,
                //sorting: true,

                paging: true,
                pageLoading: false,
                autoload: true,
                pageSize: 5,
                pageButtonCount: 2,

                noDataContent: "No records",

                confirmDeleting: false,
                deleteConfirm: function () {
                    return "Do you really want to delete the contact?";
                },

                data: @contacts,
                fields: [
                    { name: "ContactName", type: "text", title: "Name", validate: "required" },
                    { name: "ContactTitle", type: "text", title: "Title" },
                    { name: "ContactPhone", type: "text", title: "Phone" },
                    { name: "ContactEmail", type: "text", title: "Email" },
                    { name: "ContactId", visible: false, width: 0 },
                    { type: "control" }
                ],
                @*controller: {
                    loadData: function (filter) {
                        return $.ajax({
                            type: "GET",
                            url: "@Url.Action("GetAll")",
                            data: filter
                        });
                    },

                    insertItem: function (item) {
                        var d = $.Deferred();

                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("Save")',
                            data: item
                        }).done(function (response) {
                            console.log("done:", response);
                            d.resolve(response);
                        }).fail(function (message) {
                            console.log("fail", message);
                            d.reject();
                        });

                        return d.promise();
                    },

                    updateItem: function (item) {
                        return $.ajax({
                            type: "POST",
                            url: "@Url.Action("Save")",
                            data: item
                        });
                    },

                    deleteItem: function (item) {
                        return $.ajax({
                            type: "POST",
                            url: "@Url.Action("Delete")",
                            data: item
                        });
                    }
                },*@

                invalidNotify: function (args) {
                    var messages = $.map(args.errors, function (error) {
                        return error.field.name + ": " + error.message;
                    });
                    console.log("invalidNotify", messages);
                },
                onItemInvalid: function (args) {
                    var messages = $.map(args.errors, function (error) {
                        return error.field.name + ": " + error.message;
                    });
                    console.log("onItemInvalid", messages);

                    const wrapper = document.createElement('div');
                    wrapper.innerHTML = messages.join("<br>");
                    Swal.fire({ title: 'Error', html: wrapper, type: 'error' });
                },
                onItemDeleting: function (args) {
                    if (!args.item.deleteConfirmed) { // custom property for confirmation
                        args.cancel = true; // cancel deleting
                        Swal.fire({
                            title: 'Are you sure?',
                            text: "Do you want to delete this Contact? Once deleted, you will not be able to recover!",
                            type: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, delete it!',
                            cancelButtonText: 'No, cancel it!',
                            reverseButtons: false
                        }).then((result) => {
                            if (result.value) {
                                args.item.deleteConfirmed = true;
                                $grid.jsGrid('deleteItem', args.item); //call deleting once more in callback
                                Swal.fire('Deleted!', 'Contact has been deleted.', 'success');
                            }
                        });
                    }
                },
                onError: function (args) {
                    Swal.fire('Error', 'Error occured!', 'error');
                }
            });
            debugger;
        });
    </script>
}