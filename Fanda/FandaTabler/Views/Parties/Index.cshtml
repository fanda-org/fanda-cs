@{
    ViewData["Title"] = "Index";
}
@using System.Text;

@*<div class="page-header">
        <h1 class="page-title">
            Business Contacts
        </h1>
    </div>*@
<div class="card">
    <div class="card-header">
        <h3 class="card-title"><i class="fe fe-users"></i> Business Contacts</h3>
        <div class="card-options">
            <a class="btn btn-sm btn-outline-primary mr-1" role="button" data-toggle="tooltip" title="Refresh" href="#" onclick="$('#table').DataTable().ajax.reload();"><i class="fe fe-refresh-cw"></i></a>
            <a class="btn btn-sm btn-primary dropdown-toggle dropdown-toggle-split my-dropdown my-tooltip" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" title="Create New"><i class="fe fe-edit"></i> Create New</a>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                @foreach (var item in Fanda.Shared.Enums.FandaEnums.GetPartyTypes())
                {
                    <a class="btn dropdown-item" href="@Url.Action("Create", new { contactType = item })">@item</a>
                }
            </div>
        </div>
    </div>
    @*<div class="card-body">*@
    <form method="post">
        <div class="table-responsive">
            <table id="table" class="table table-sm table-striped table-align-middle table-hover card-table table-vcenter text-nowrap datatable">
                <!---->
                <thead>
                    <tr>
                        <th class="w-8">Code</th>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Category</th>
                        <th>Active</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <th>Code</th>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Category</th>
                        <th>Active</th>
                        <th></th>
                    </tr>
                </tfoot>
            </table>
        </div>
    </form>
    @*</div>*@
</div>


@section scripts {
    <script type="text/javascript">
        require(['jquery', 'datatables', 'sweetalert2'], function ($, dataTable, Swal) {
            $('.my-dropdown').dropdown();
            $('.my-dropdown').tooltip();

            // Add Searchable footer
            $('#table tfoot th').each(function () {
                var title = $(this).text();

                if (title !== '') {
                    if (title == 'Active') {
                        $(this).html('<select class="form-control" style="width: 100%" placeholder="Search ' + title + '">' +
                            '<option value=true>Active</option>' +
                            '<option value=false>Inactive</option>' +
                            '<option value="" selected>Both</option>' +
                            '</select>');
                    }
                    else if (title == 'Type') {
                        //StringBuilder opt = new StringBuilder();
                        //foreach (var item in FandaEnums.GetPartyTypes())
                        //{
                        //    opt.Append($"<option value=\"{item.ToString()}\">{item.ToString()}</option>");
                        //}
                        $(this).html('<select class="form-control" style="width: 100%" placeholder="Search ' + title + '">' +
                            '<option value="" selected>All</option>' +
                            '<option value="Customer">Customer</option>' +
                            '<option value="Supplier">Supplier</option>' +
                            '<option value="Buyer">Buyer</option>' +
                            '<option value="Other">Other</option>' +
                            '</select>');
                    }
                    else
                        $(this).html('<input type="text" class="form-control" style="width: 100%" placeholder="Search ' + title + '" />');
                }
            });

            // Antiforgery Token
            $(document).ajaxSend(function (e, xhr, options) {
                if (options.type.toUpperCase() == "POST" || options.type.toUpperCase() == "PATCH") {
                    var token = $("input[name='__RequestVerificationToken']").val();
                    xhr.setRequestHeader("RequestVerificationToken", token);
                }
            });

            // Active checkbox
            $('#table').on('change', 'input[type="checkbox"]', function (e) {
                // stop post
                e.preventDefault();

                var data = {};
                data.id = $(this).data("id");
                data.active = $(this).prop('checked');
                console.log("Active:Checkbox", data);

                $.ajax({
                    type: 'PATCH',
                    url: "@Url.Action("ChangeStatus")",
                    data: JSON.stringify(data),
                    contentType: "application/json; charset=utf-8",
                    //dataType: 'json',
                    success: function (res, textStatus, jqXhr) {
                        console.log('Status successfully patched');
                    },
                    error: function (res, textStatus, error) {
                        console.log("Error:", res, textStatus, error);
                    }
                }).done(function (res) {
                    console.log("Done");
                    console.log(res);
                }).fail(function (res) {
                    console.log('Fail');
                    console.log(res);
                });
            });

            // DataTable creation
            var table = $('#table').DataTable({
                autoWidth: true,
                processing: true,
                serverSide: true,
                order: [[0, "asc"]],
                pageLength: 10,
                stateSave: true,
                stateSaveParams: function (settings, data) {
                    var temp = {};
                    $('#table tfoot input').each(function (n) {
                        temp[$(this).attr('placeholder')] = this.value;
                    });
                    $('#table tfoot select').each(function (n) {
                        temp[$(this).attr('placeholder')] = this.value;
                    });
                    data.colsFilter = temp;
                },
                stateLoadParams: function (settings, data) {
                    $.each(data.colsFilter, function (key, val) {
                        if (key == 'Search Active' || key == 'Search Type') {
                            $('#table tfoot select[placeholder="' + key + '"]').val(val);
                        }
                        else {
                            $('#table tfoot input[placeholder="' + key + '"]').val(val);
                        }
                    });
                },
                ajax: {
                    url: "@Url.Action("GetAll")"
                },
                deferRender: true,
                //scrollY: "400px",
                //scrollX: true,
                search: { caseInsensitive: true },
                columnDefs: [
                    {
                        targets: 0, data: 'Code',
                        render: function (code, type, row, meta) {
                            var catId = row.PartyId;
                            var link = '@Url.Action("Details", new { id = "-1" })';
                            link = link.replace("-1", catId);
                            return '<a href=' + link + ' class="text-inherit">' + code + '</a>';
                        }
                    },
                    {
                        targets: 1, data: 'Name',
                        render: function (name, type, row, meta) {
                            var catId = row.PartyId;
                            var link = '@Url.Action("Details", new { id = "-1" })';
                            link = link.replace("-1", catId);
                            return '<a href=' + link + ' class="text-inherit">' + name + '</a>';
                        }
                    },
                    {
                        targets: 2, data: 'PartyType'
                    },
                    {
                        targets: 3, data: 'CategoryName'
                    },
                    {
                        targets: 4, data: 'Active',
                        render: function (active, type, party, meta) {
                                //return '<span class="' + activeClass(active) + '">' + (active == 0 ? "Inactive" : "Active") + '</span>';
                                //return data == 0 ? 'Inactive' : 'Active';
                                //return '<div class="custom-control custom-checkbox">' +
                                //    '<input type="checkbox" ' + (active ? "checked" : "") + ' class="custom-control-input" id="chk-' + cat.CategoryId + '">' +
                                //    '<label class="custom-control-label" style="cursor:pointer" for="chk-' + cat.CategoryId + '">&nbsp;</label>'
                                //'</div>';
                                //return '<input type="checkbox" id="chk-' + cat.CategoryId + '" ' + (active ? "checked" : "") + ' data-toggle="toggle" data-size="small" data-on="Active" data-off="Inactive" data-onstyle="primary" data-offstyle="secondary">';
                            return '<label class="custom-switch">' +
                                '<input type="checkbox" class="custom-switch-input" name="chk-' + party.PartyId + '" ' + (active ? "checked" : "") + ' data-id="' + party.PartyId + '">' +
                                '<span class="custom-switch-indicator"></span>' +
                                '<span class="custom-switch-description">&nbsp;</span>' +
                                '</label>';
                            }
                    },
                    {
                        targets: 5, data: 'PartyId',
                        render: function (id, type, row, meta) {
                            var editLink = '@Url.Action("Edit", new { id = "-1" })';
                            var deleteLink = '@Url.Action("Delete", new { id = "-1" })';
                            editLink = editLink.replace("-1", id);
                            deleteLink = deleteLink.replace("-1", id);

                            return '<div class="btn-group" role="group">' +
                                '<a class="btn btn-sm btn-outline-primary font-weight-bold" title="Edit" data-toggle="tooltip" href=' + editLink + '><i class="fe fe-edit-2"></i></a>' +
                                '<a class="btn btn-sm btn-outline-danger font-weight-bold" title="Delete" data-toggle="tooltip" href=' + deleteLink + '><i class="fe fe-trash"></i></a>' +
                                '</div>';
                        },
                        sortable: false,
                        searchable: false
                    }
                ]
            });

            // Apply search
            table.columns().every(function () {
                var that = this;

                $('input', this.footer()).on('keyup change', function () {
                    if (that.search() !== this.value) {
                        that
                            .search(this.value, false, true, false)
                            .draw();
                    }
                });

                $('select', this.footer()).on('change', function () {
                    debugger;
                    if (that.search() !== this.value) {
                        //var val = $.fn.dataTable.util.escapeRegex($(this).val());
                        that
                            .search(this.value, false, true, false)
                            .draw();
                    }
                });
            });

            $('body').tooltip({ selector: '[data-toggle="tooltip"]' });
            //$('[data-toggle="tooltip"]').tooltip({ container: 'body' });
        });

        function RefreshTable(tableId, urlData) {
            console.log("Refresh table started...");
            $.getJSON(urlData, null, function (json) {
                table = $(tableId).dataTable();
                oSettings = table.fnSettings();

                table.fnClearTable(this);

                for (var i = 0; i < json.aaData.length; i++) {
                    table.oApi._fnAddData(oSettings, json.aaData[i]);
                }

                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
                table.fnDraw();
            });
        }

        function activeClass(value) {
            return "badge " + (value ? "badge-success" : "badge-secondary");
        }
    </script>
}
