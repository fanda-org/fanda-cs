@{
    ViewData["Title"] = "Contact Categories";
}

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Contact Categories</h3>
    </div>
    <div class="card-body">
        <form method="post">
            <div id="jsGrid"></div>
        </form>
    </div>
</div>


@section scripts{
    <script src="~/libs/vendors/jsgrid/js/jsgrid.min.js"></script>
    <script>
        $(document).ready(function () {

            //$(".model-dialog").draggable({
            //    handle: ".modal-header"
            //});

            $(document).ajaxSend(function (e, xhr, options) {
                if (options.type.toUpperCase() == "POST" || options.type.toUpperCase() == "PATCH") {
                    let token = $("input[name='__RequestVerificationToken']").val();
                    xhr.setRequestHeader("RequestVerificationToken", token);
                }
            });

            var $grid = $("#jsGrid").jsGrid({
                height: "auto",  // "450"
                width: "100%",

                heading: true,
                autoload: true,

                pagerFormat: "Pages: {pages} &nbsp;&nbsp;|&nbsp;&nbsp; Rows: {itemCount}",
                // "Pages: {first} {prev} {pages} {next} {last} &nbsp;&nbsp; {pageIndex} of {pageCount}"
                pageSize: 10,
                pageButtonCount: 5,
                paging: true,
                pageLoading: true,
                filtering: true,
                sorting: true,

                inserting: true,
                editing: true,
                selecting: true,

                noDataContent: "No records",

                confirmDeleting: false,
                @*deleteConfirm: function () {
                    return "Do you really want to delete the category?";
                },*@

                controller: {
                    loadData: function (filter) {
                        return $.ajax({
                            type: "GET",
                            url: "@Url.Action("GetAll")",
                            data: filter
                        });
                    },
                    insertItem: function (item) {
                        return $.ajax({
                            type: 'POST',
                            url: '@Url.Action("Save")',
                            data: item
                        }).done(function () {
                            toastr.success("Category inserted successfully!");
                        });
                    },
                    updateItem: function (item) {
                        return $.ajax({
                            type: "POST",
                            url: "@Url.Action("Save")",
                            data: item
                        }).done(function () {
                            toastr.success("Category updated successfully!");
                        });
                    },
                    deleteItem: function (item) {
                        return $.ajax({
                            type: "POST",
                            url: '@Url.Action("Delete", new { id = "-1" })'.replace("-1", item.id),
                            data: item
                        }).done(function () {
                            toastr.success("Category deleted successfully!");
                        });
                    }
                },

                rowClick: function (args) { },

                invalidNotify: function (args) {
                    let messages = $.map(args.errors, function (error) {
                        return error.message + "!";
                    });
                    console.log("invalidNotify", messages);
                    toastr.warning(messages.join("<br>"), "Warning");
                },

                onError: function (error) {
                    console.log("onError", error);
                    let messages = $.map(error.args[0].responseJSON, function (msg) {
                        return msg + "!";
                    });
                    toastr.warning(messages.join("<br>"), "Warning");
                },

                onItemDeleting: function (args) {
                    let $row = this.rowByItem(args.item),
                        selectedRow = $grid.find('table tr.highlight');
                    if (selectedRow.length) {
                        selectedRow.toggleClass('highlight');
                    };
                    $row.toggleClass("highlight");

                    //console.log(args);
                    if (!args.item.deleteConfirmed) { // custom property for confirmation
                        args.cancel = true; // cancel deleting

                        bootbox.confirm({
                            title: "Delete category?",
                            message: "Are you sure you want to <em>delete</em> this category?<br>Once deleted, you will not be able to recover!",
                            closeButton: true,
                            buttons: {
                                cancel: {
                                    label: 'No',
                                    className: 'btn-secondary'
                                },
                                confirm: {
                                    label: 'Yes',
                                    className: 'btn-danger'
                                }
                            },
                            callback: function (yes) {
                                if (yes) {
                                    args.item.deleteConfirmed = true;
                                    $grid.jsGrid('deleteItem', args.item); //call deleting once more in callback
                                }
                                $row.toggleClass("highlight");
                            }
                        });
                    }
                },

                fields: [
                    {
                        name: "code", type: "text", title: "Code", width: 75,
                        insertTemplate: function () {
                            var $input = this.__proto__.insertTemplate.call(this); //original input
                            $input.addClass('text-uppercase');
                            setTimeout(function () {
                                $input.focus();
                            });
                            return $input;
                        },
                        editTemplate: function (value, _) {
                            // To get the 'input' element.
                            var $input = this.__proto__.editTemplate.call(this, value); //original input
                            $input.addClass('text-uppercase');
                            //jsGrid.fields.text.prototype.editTemplate.call(this, value);
                            // It only works with 'setTimeout' function.
                            setTimeout(function () {
                                $input.focus();
                            });
                            return $input;
                        },
                        validate: { validator: "required", message: "Code is required" }
                    },
                    {
                        name: "name", type: "text", title: "Name", width: 150,
                        validate: { validator: "required", message: "Name is required" }
                    },
                    {
                        name: "description", type: "text", title: "Description", width: 200
                    },
                    {
                        name: "active", type: "checkbox", title: "Active", sorting: false,
                        insertTemplate: function () {
                            let input = this.__proto__.insertTemplate.call(this); //original input
                            input.prop('checked', true);
                            input.prop('disabled', 'disabled');
                            return input;
                        }
                    },
                    {
                        name: "id", visible: false, width: 0
                    },
                    {
                        type: "control"
                    }
                ]
            });
            $grid.find(".jsgrid-mode-button").click();

            @*$grid.jsGrid("option", "height", 452);
            $grid.jsGrid("sort", { field: "code", order: "asc" });*@
        });
    </script>
}