// <auto-generated />
using System;
using Fanda.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fanda.Data.Migrations
{
    [DbContext(typeof(FandaContext))]
    [Migration("20180805161431_IngredientRemoveFK")]
    partial class IngredientRemoveFK
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Fanda.Data.Access.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Fanda.Data.Access.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateLastLogin");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Fanda.Data.Base.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100);

                    b.Property<string>("AddressTypeString")
                        .IsRequired()
                        .HasColumnName("AddressType")
                        .HasMaxLength(25);

                    b.Property<string>("City")
                        .HasMaxLength(25);

                    b.Property<string>("Country")
                        .HasMaxLength(25);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10);

                    b.Property<string>("State")
                        .HasMaxLength(25);

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Fanda.Data.Base.Contact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255);

                    b.Property<string>("ContactName")
                        .HasMaxLength(50);

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(25);

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(50);

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Fanda.Data.Business.BankAccount", b =>
                {
                    b.Property<Guid>("BankAcctId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("AccountTypeString")
                        .HasColumnName("AccountType")
                        .HasMaxLength(16);

                    b.Property<bool>("Active");

                    b.Property<Guid?>("AddressId");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("BankShortName")
                        .HasMaxLength(15);

                    b.Property<string>("BranchCode")
                        .HasMaxLength(16);

                    b.Property<string>("BranchName")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ContactId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("IfscCode")
                        .HasMaxLength(16);

                    b.Property<string>("MicrCode")
                        .HasMaxLength(16);

                    b.HasKey("BankAcctId");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("ContactId")
                        .IsUnique()
                        .HasFilter("[ContactId] IS NOT NULL");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("Fanda.Data.Business.Device", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<Guid?>("LocationId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("DeviceId");

                    b.HasIndex("LocationId");

                    b.HasIndex("Code", "LocationId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL");

                    b.HasIndex("Name", "LocationId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Fanda.Data.Business.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId");

                    b.HasKey("LocationId");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Fanda.Data.Business.OrgAddress", b =>
                {
                    b.Property<Guid>("OrgId");

                    b.Property<Guid>("AddressId");

                    b.HasKey("OrgId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("OrgAddress");
                });

            modelBuilder.Entity("Fanda.Data.Business.Organization", b =>
                {
                    b.Property<Guid>("OrgId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("GSTIN")
                        .HasMaxLength(25);

                    b.Property<string>("OrgCode")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PAN")
                        .HasMaxLength(25);

                    b.Property<string>("RegdNum")
                        .HasMaxLength(25);

                    b.Property<string>("TAN")
                        .HasMaxLength(25);

                    b.HasKey("OrgId");

                    b.HasIndex("OrgCode")
                        .IsUnique();

                    b.HasIndex("OrgName")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Fanda.Data.Business.OrgBank", b =>
                {
                    b.Property<Guid>("OrgId");

                    b.Property<Guid>("BankAcctId");

                    b.HasKey("OrgId", "BankAcctId");

                    b.HasIndex("BankAcctId");

                    b.ToTable("OrgBank");
                });

            modelBuilder.Entity("Fanda.Data.Business.OrgContact", b =>
                {
                    b.Property<Guid>("OrgId");

                    b.Property<Guid>("ContactId");

                    b.HasKey("OrgId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("OrgContact");
                });

            modelBuilder.Entity("Fanda.Data.Business.OrgUser", b =>
                {
                    b.Property<Guid>("OrgId");

                    b.Property<Guid>("UserId");

                    b.Property<Guid?>("LocationId");

                    b.HasKey("OrgId", "UserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("OrgUser");
                });

            modelBuilder.Entity("Fanda.Data.Business.Party", b =>
                {
                    b.Property<Guid>("PartyId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("CategoryId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("GSTIN")
                        .HasMaxLength(25);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId");

                    b.Property<string>("PAN")
                        .HasMaxLength(25);

                    b.Property<string>("PartyTypeString")
                        .HasColumnName("PartyType")
                        .HasMaxLength(16);

                    b.Property<string>("PaymentTermString")
                        .HasColumnName("PaymentTerm")
                        .HasMaxLength(16);

                    b.Property<string>("RegdNum")
                        .HasMaxLength(25);

                    b.Property<string>("TAN")
                        .HasMaxLength(25);

                    b.HasKey("PartyId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("Fanda.Data.Business.PartyAddress", b =>
                {
                    b.Property<Guid>("PartyId");

                    b.Property<Guid>("AddressId");

                    b.HasKey("PartyId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("PartyAddress");
                });

            modelBuilder.Entity("Fanda.Data.Business.PartyBank", b =>
                {
                    b.Property<Guid>("PartyId");

                    b.Property<Guid>("BankAcctId");

                    b.HasKey("PartyId", "BankAcctId");

                    b.HasIndex("BankAcctId");

                    b.ToTable("PartyBank");
                });

            modelBuilder.Entity("Fanda.Data.Business.PartyCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId");

                    b.HasKey("CategoryId");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("PartyCategories");
                });

            modelBuilder.Entity("Fanda.Data.Business.PartyContact", b =>
                {
                    b.Property<Guid>("PartyId");

                    b.Property<Guid>("ContactId");

                    b.HasKey("PartyId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("PartyContact");
                });

            modelBuilder.Entity("Fanda.Data.Commodity.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid?>("BrandId");

                    b.Property<Guid>("CategoryId");

                    b.Property<decimal>("CentralGstPct")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<decimal>("InterGstPct")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId");

                    b.Property<string>("ProductTypeString")
                        .HasColumnName("ProductType")
                        .HasMaxLength(16);

                    b.Property<Guid?>("SegmentId");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("StateGstPct")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<Guid>("UnitId");

                    b.Property<Guid?>("VarietyId");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrgId");

                    b.HasIndex("SegmentId");

                    b.HasIndex("UnitId");

                    b.HasIndex("VarietyId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Fanda.Data.Commodity.ProductBrand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId");

                    b.HasKey("BrandId");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("ProductBrands");
                });

            modelBuilder.Entity("Fanda.Data.Commodity.ProductCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId");

                    b.Property<Guid?>("ParentId");

                    b.HasKey("CategoryId");

                    b.HasIndex("OrgId");

                    b.HasIndex("ParentId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Fanda.Data.Commodity.ProductIngredient", b =>
                {
                    b.Property<Guid>("IngredientId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IngredientProductId");

                    b.Property<Guid>("ProductId");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<Guid>("UnitId");

                    b.HasKey("IngredientId");

                    b.HasIndex("UnitId");

                    b.HasIndex("ProductId", "IngredientProductId")
                        .IsUnique();

                    b.ToTable("ProductIngredients");
                });

            modelBuilder.Entity("Fanda.Data.Commodity.ProductPricing", b =>
                {
                    b.Property<Guid>("PricingId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("InvoiceCategoryId");

                    b.Property<Guid?>("PartyCategoryId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("PricingId");

                    b.HasIndex("InvoiceCategoryId");

                    b.HasIndex("PartyCategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPricings");
                });

            modelBuilder.Entity("Fanda.Data.Commodity.ProductPricingRange", b =>
                {
                    b.Property<Guid>("RangeId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AdjustAmt")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("AdjustPct")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("MaxQty")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("MinQty")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<Guid>("PricingId");

                    b.Property<string>("RoundOffOptionString")
                        .HasColumnName("RoundOffOption")
                        .HasMaxLength(16);

                    b.HasKey("RangeId");

                    b.HasIndex("PricingId");

                    b.ToTable("ProductPricingRanges");
                });

            modelBuilder.Entity("Fanda.Data.Commodity.ProductSegment", b =>
                {
                    b.Property<Guid>("SegmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId");

                    b.HasKey("SegmentId");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("ProductSegments");
                });

            modelBuilder.Entity("Fanda.Data.Commodity.ProductVariety", b =>
                {
                    b.Property<Guid>("VarietyId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId");

                    b.HasKey("VarietyId");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("ProductVarieties");
                });

            modelBuilder.Entity("Fanda.Data.Commodity.Unit", b =>
                {
                    b.Property<Guid>("UnitId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<Guid>("OrgId");

                    b.HasKey("UnitId");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Fanda.Data.Commodity.UnitConversion", b =>
                {
                    b.Property<Guid>("ConversionId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<byte>("CalcStep");

                    b.Property<decimal>("Factor")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<Guid>("FromUnitId");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<Guid>("OrgId");

                    b.Property<Guid>("ToUnitId");

                    b.HasKey("ConversionId");

                    b.HasIndex("FromUnitId");

                    b.HasIndex("OrgId");

                    b.HasIndex("ToUnitId");

                    b.ToTable("UnitConversions");
                });

            modelBuilder.Entity("Fanda.Data.Inventory.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<decimal>("DiscountAmt")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("DiscountPct")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(16);

                    b.Property<string>("InvoiceTypeString")
                        .HasColumnName("InvoiceType")
                        .HasMaxLength(16);

                    b.Property<decimal>("MiscAddAmt")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("MiscAddDesc")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.Property<Guid>("OrgId");

                    b.Property<Guid>("PartyId");

                    b.Property<DateTime?>("PartyRefDate");

                    b.Property<string>("PartyRefNum")
                        .HasMaxLength(16);

                    b.Property<string>("StockInvoiceTypeString")
                        .HasColumnName("StockInvoiceType")
                        .HasMaxLength(16);

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("TaxAmt")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("TaxPct")
                        .HasColumnType("decimal(16, 4)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrgId");

                    b.HasIndex("PartyId");

                    b.HasIndex("InvoiceNumber", "OrgId")
                        .IsUnique()
                        .HasFilter("[InvoiceNumber] IS NOT NULL");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Fanda.Data.Inventory.InvoiceCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<Guid>("OrgId");

                    b.HasKey("CategoryId");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("InvoiceCategories");
                });

            modelBuilder.Entity("Fanda.Data.Inventory.InvoiceItem", b =>
                {
                    b.Property<Guid>("InvItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("CentralGstAmt")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("CentralGstPct")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<decimal>("DiscountAmt")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("DiscountPct")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("InterGstAmt")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("InterGstPct")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<Guid>("InvoiceId");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("StateGstAmt")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<decimal>("StateGstPct")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<Guid>("StockId");

                    b.Property<Guid>("UnitId");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(16, 4)");

                    b.HasKey("InvItemId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("StockId");

                    b.HasIndex("UnitId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("Fanda.Data.Inventory.Stock", b =>
                {
                    b.Property<Guid>("StockId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("ExpiryDate");

                    b.Property<DateTime?>("MfgDate");

                    b.Property<Guid>("ProductId");

                    b.Property<decimal>("QtyOnHand")
                        .HasColumnType("decimal(16, 4)");

                    b.Property<Guid>("UnitId");

                    b.HasKey("StockId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.HasIndex("BatchNumber", "ProductId")
                        .IsUnique()
                        .HasFilter("[BatchNumber] IS NOT NULL");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Fanda.Data.Tracking.AuditTrail", b =>
                {
                    b.Property<Guid>("AuditTrailId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActivatedUserId");

                    b.Property<Guid?>("ApprovedUserId");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<string>("CurrentStatusString")
                        .IsRequired()
                        .HasColumnName("CurrentStatus")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateActivated");

                    b.Property<DateTime?>("DateApproved");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateDeactivated");

                    b.Property<DateTime?>("DateDeleted");

                    b.Property<DateTime?>("DateHold");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime?>("DatePrinted");

                    b.Property<DateTime?>("DateRejected");

                    b.Property<Guid?>("DeactivatedUserId");

                    b.Property<Guid?>("DeletedUserId");

                    b.Property<Guid?>("HoldUserId");

                    b.Property<Guid?>("ModifiedUserId");

                    b.Property<Guid?>("PrintedUserId");

                    b.Property<Guid?>("RejectedUserId");

                    b.Property<Guid>("RowId");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.HasKey("AuditTrailId");

                    b.HasIndex("ActivatedUserId");

                    b.HasIndex("ApprovedUserId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeactivatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("HoldUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PrintedUserId");

                    b.HasIndex("RejectedUserId");

                    b.HasIndex("TableName", "RowId")
                        .IsUnique();

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Fanda.Data.Business.BankAccount", b =>
                {
                    b.HasOne("Fanda.Data.Base.Address", "Address")
                        .WithOne("BankAccount")
                        .HasForeignKey("Fanda.Data.Business.BankAccount", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Base.Contact", "Contact")
                        .WithOne("BankAccount")
                        .HasForeignKey("Fanda.Data.Business.BankAccount", "ContactId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Business.Device", b =>
                {
                    b.HasOne("Fanda.Data.Business.Location", "Location")
                        .WithMany("Devices")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Business.Location", b =>
                {
                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("Locations")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Business.OrgAddress", b =>
                {
                    b.HasOne("Fanda.Data.Base.Address", "Address")
                        .WithMany("OrgAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("Addresses")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fanda.Data.Business.OrgBank", b =>
                {
                    b.HasOne("Fanda.Data.Business.BankAccount", "BankAccount")
                        .WithMany("OrgBanks")
                        .HasForeignKey("BankAcctId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("Banks")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fanda.Data.Business.OrgContact", b =>
                {
                    b.HasOne("Fanda.Data.Base.Contact", "Contact")
                        .WithMany("OrgContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("Contacts")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fanda.Data.Business.OrgUser", b =>
                {
                    b.HasOne("Fanda.Data.Business.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fanda.Data.Access.User", "User")
                        .WithMany("Organizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fanda.Data.Business.Party", b =>
                {
                    b.HasOne("Fanda.Data.Business.PartyCategory", "Category")
                        .WithMany("Parties")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("Parties")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Business.PartyAddress", b =>
                {
                    b.HasOne("Fanda.Data.Base.Address", "Address")
                        .WithMany("PartyAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fanda.Data.Business.Party", "Party")
                        .WithMany("Addresses")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fanda.Data.Business.PartyBank", b =>
                {
                    b.HasOne("Fanda.Data.Business.BankAccount", "BankAccount")
                        .WithMany("PartyBanks")
                        .HasForeignKey("BankAcctId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fanda.Data.Business.Party", "Party")
                        .WithMany("Banks")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fanda.Data.Business.PartyCategory", b =>
                {
                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("PartyCategories")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Business.PartyContact", b =>
                {
                    b.HasOne("Fanda.Data.Base.Contact", "Contact")
                        .WithMany("PartyContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fanda.Data.Business.Party", "Party")
                        .WithMany("Contacts")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fanda.Data.Commodity.Product", b =>
                {
                    b.HasOne("Fanda.Data.Commodity.ProductBrand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Commodity.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("Products")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Commodity.ProductSegment", "Segment")
                        .WithMany("Products")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Commodity.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Commodity.ProductVariety", "Variety")
                        .WithMany("Products")
                        .HasForeignKey("VarietyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Commodity.ProductBrand", b =>
                {
                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("ProductBrands")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Commodity.ProductCategory", b =>
                {
                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("ProductCategories")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Commodity.ProductCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Commodity.ProductIngredient", b =>
                {
                    b.HasOne("Fanda.Data.Commodity.Product", "Product")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fanda.Data.Commodity.Unit", "Unit")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Commodity.ProductPricing", b =>
                {
                    b.HasOne("Fanda.Data.Inventory.InvoiceCategory", "InvoiceCategory")
                        .WithMany("ProductPricings")
                        .HasForeignKey("InvoiceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Business.PartyCategory", "PartyCategory")
                        .WithMany("ProductPricings")
                        .HasForeignKey("PartyCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Commodity.Product", "Product")
                        .WithMany("ProductPricings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fanda.Data.Commodity.ProductPricingRange", b =>
                {
                    b.HasOne("Fanda.Data.Commodity.ProductPricing", "ProductPricing")
                        .WithMany("PricingRanges")
                        .HasForeignKey("PricingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fanda.Data.Commodity.ProductSegment", b =>
                {
                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("ProductSegments")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Commodity.ProductVariety", b =>
                {
                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("ProductVarieties")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Commodity.Unit", b =>
                {
                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("Units")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Commodity.UnitConversion", b =>
                {
                    b.HasOne("Fanda.Data.Commodity.Unit", "FromUnit")
                        .WithMany("FromUnitConversions")
                        .HasForeignKey("FromUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("UnitConversions")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Commodity.Unit", "ToUnit")
                        .WithMany("ToUnitConversions")
                        .HasForeignKey("ToUnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Inventory.Invoice", b =>
                {
                    b.HasOne("Fanda.Data.Inventory.InvoiceCategory", "Category")
                        .WithMany("Invoices")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("Invoices")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Business.Party", "Party")
                        .WithMany("Invoices")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Inventory.InvoiceCategory", b =>
                {
                    b.HasOne("Fanda.Data.Business.Organization", "Organization")
                        .WithMany("InvoiceCategories")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Inventory.InvoiceItem", b =>
                {
                    b.HasOne("Fanda.Data.Inventory.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fanda.Data.Inventory.Stock", "Stock")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Commodity.Unit", "Unit")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Inventory.Stock", b =>
                {
                    b.HasOne("Fanda.Data.Commodity.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Commodity.Unit", "Unit")
                        .WithMany("Stocks")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Data.Tracking.AuditTrail", b =>
                {
                    b.HasOne("Fanda.Data.Access.User", "ActivatedUser")
                        .WithMany("ActivatedTrails")
                        .HasForeignKey("ActivatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Access.User", "ApprovedUser")
                        .WithMany("ApprovedTrails")
                        .HasForeignKey("ApprovedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Access.User", "CreatedUser")
                        .WithMany("CreatedTrails")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Access.User", "DeactivatedUser")
                        .WithMany("DeactivatedTrails")
                        .HasForeignKey("DeactivatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Access.User", "DeletedUser")
                        .WithMany("DeletedTrails")
                        .HasForeignKey("DeletedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Access.User", "HoldUser")
                        .WithMany("HoldTrails")
                        .HasForeignKey("HoldUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Access.User", "ModifiedUser")
                        .WithMany("ModifiedTrails")
                        .HasForeignKey("ModifiedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Access.User", "PrintedUser")
                        .WithMany("PrintedTrails")
                        .HasForeignKey("PrintedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Data.Access.User", "RejectedUser")
                        .WithMany("RejectedTrails")
                        .HasForeignKey("RejectedUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Fanda.Data.Access.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Fanda.Data.Access.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Fanda.Data.Access.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Fanda.Data.Access.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fanda.Data.Access.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Fanda.Data.Access.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
