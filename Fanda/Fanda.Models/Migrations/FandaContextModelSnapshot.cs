// <auto-generated />
using System;
using Fanda.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fanda.Models.Migrations
{
    [DbContext(typeof(FandaContext))]
    partial class FandaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Fanda.Models.AccountYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("YearBegin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("YearEnd")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.ToTable("AccountYears");
                });

            modelBuilder.Entity("Fanda.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("AddressTypeString")
                        .IsRequired()
                        .HasColumnName("AddressType")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("Attention")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("Country")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("Fax")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("State")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Fanda.Models.Bank", b =>
                {
                    b.Property<Guid>("LedgerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("AccountTypeString")
                        .HasColumnName("AccountType")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<string>("BranchName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("char(36)");

                    b.Property<string>("IfscCode")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MicrCode")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.HasKey("LedgerId");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Fanda.Models.Buyer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ContactId")
                        .IsUnique();

                    b.ToTable("Buyer");
                });

            modelBuilder.Entity("Fanda.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Department")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("Designation")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("Salutation")
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5);

                    b.Property<string>("WorkPhone")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Fanda.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BuyerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DiscountAmt")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("DiscountPct")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("GstTreatmentString")
                        .HasColumnName("GstTreatment")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<string>("InvoiceTypeString")
                        .HasColumnName("InvoiceType")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<decimal>("MiscAddAmt")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("MiscAddDesc")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<Guid>("PartyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("PartyRefDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PartyRefNum")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("StockInvoiceTypeString")
                        .HasColumnName("StockInvoiceType")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("TaxAmt")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("TaxPct")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("TaxPreferenceString")
                        .HasColumnName("TaxPreference")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<Guid>("YearId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PartyId");

                    b.HasIndex("YearId");

                    b.HasIndex("Number", "YearId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Fanda.Models.InvoiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("InvoiceCategories");
                });

            modelBuilder.Entity("Fanda.Models.InvoiceItem", b =>
                {
                    b.Property<Guid>("InvoiceItemId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("CentralGstAmt")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("CentralGstPct")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<decimal>("DiscountAmt")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("DiscountPct")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("InterGstAmt")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("InterGstPct")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("StateGstAmt")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("StateGstPct")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<Guid>("StockId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("InvoiceItemId", "InvoiceId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("StockId");

                    b.HasIndex("UnitId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("Fanda.Models.Ledger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<bool>("IsSystem")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("LedgerGroupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LedgerGroupId");

                    b.HasIndex("OrgId");

                    b.HasIndex("ParentId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("Ledgers");
                });

            modelBuilder.Entity("Fanda.Models.LedgerBalance", b =>
                {
                    b.Property<Guid>("LedgerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("YearId")
                        .HasColumnType("char(36)");

                    b.Property<string>("BalanceSign")
                        .IsRequired()
                        .HasColumnType("varchar(1) CHARACTER SET utf8mb4")
                        .HasMaxLength(1);

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("LedgerId", "YearId");

                    b.HasIndex("YearId");

                    b.ToTable("LedgerBalances");
                });

            modelBuilder.Entity("Fanda.Models.LedgerGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("GroupTypeString")
                        .IsRequired()
                        .HasColumnName("GroupType")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<bool>("IsSystem")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.HasIndex("ParentId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("LedgerGroups");
                });

            modelBuilder.Entity("Fanda.Models.OrgAddress", b =>
                {
                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.HasKey("OrgId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("OrgAddresses");
                });

            modelBuilder.Entity("Fanda.Models.OrgContact", b =>
                {
                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("char(36)");

                    b.HasKey("OrgId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("OrgContacts");
                });

            modelBuilder.Entity("Fanda.Models.OrgUser", b =>
                {
                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("OrgId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("OrgUsers");
                });

            modelBuilder.Entity("Fanda.Models.OrgUserRole", b =>
                {
                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("OrgId", "UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("OrgUserRoles");
                });

            modelBuilder.Entity("Fanda.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("GSTIN")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("PAN")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("RegdNum")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("TAN")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Fanda.Models.Party", b =>
                {
                    b.Property<Guid>("LedgerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("GSTIN")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("PAN")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("PartyTypeString")
                        .HasColumnName("PartyType")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<string>("PaymentTermString")
                        .HasColumnName("PaymentTerm")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<string>("RegdNum")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("TAN")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("LedgerId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("Fanda.Models.PartyAddress", b =>
                {
                    b.Property<Guid>("PartyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.HasKey("PartyId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("PartyAddresses");
                });

            modelBuilder.Entity("Fanda.Models.PartyCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("PartyCategories");
                });

            modelBuilder.Entity("Fanda.Models.PartyContact", b =>
                {
                    b.Property<Guid>("PartyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("char(36)");

                    b.HasKey("PartyId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("PartyContacts");
                });

            modelBuilder.Entity("Fanda.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("CentralGstPct")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<decimal>("InterGstPct")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProductTypeString")
                        .HasColumnName("ProductType")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<Guid?>("SegmentId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("StateGstPct")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("TaxCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TaxPreferenceString")
                        .HasColumnName("TaxPreference")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<Guid>("UnitId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("VarietyId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrgId");

                    b.HasIndex("SegmentId");

                    b.HasIndex("UnitId");

                    b.HasIndex("VarietyId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Fanda.Models.ProductBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("ProductBrands");
                });

            modelBuilder.Entity("Fanda.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.HasIndex("ParentId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Fanda.Models.ProductIngredient", b =>
                {
                    b.Property<Guid>("ParentProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChildProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("ParentProductId", "ChildProductId", "UnitId");

                    b.HasIndex("ChildProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("ProductIngredients");
                });

            modelBuilder.Entity("Fanda.Models.ProductPricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("InvoiceCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PartyCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceCategoryId");

                    b.HasIndex("PartyCategoryId");

                    b.HasIndex("ProductId", "PartyCategoryId", "InvoiceCategoryId")
                        .IsUnique();

                    b.ToTable("ProductPricings");
                });

            modelBuilder.Entity("Fanda.Models.ProductPricingRange", b =>
                {
                    b.Property<Guid>("RangeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PricingId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("AdjustAmt")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AdjustPct")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("MaxQty")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("MinQty")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("RoundOffOptionString")
                        .HasColumnName("RoundOffOption")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.HasKey("RangeId", "PricingId");

                    b.HasIndex("PricingId");

                    b.ToTable("ProductPricingRanges");
                });

            modelBuilder.Entity("Fanda.Models.ProductSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("ProductSegments");
                });

            modelBuilder.Entity("Fanda.Models.ProductVariety", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("ProductVarieties");
                });

            modelBuilder.Entity("Fanda.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Fanda.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Fanda.Models.SerialNumber", b =>
                {
                    b.Property<Guid>("YearId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ModuleString")
                        .HasColumnName("Module")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LastNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastValue")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("Prefix")
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5);

                    b.Property<string>("ResetString")
                        .HasColumnName("Reset")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<string>("SerialFormat")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<string>("Suffix")
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5);

                    b.HasKey("YearId", "ModuleString");

                    b.ToTable("SerialNumbers");
                });

            modelBuilder.Entity("Fanda.Models.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BatchNumber")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("MfgDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PartyBatchNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("QtyOnHand")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.HasIndex("BatchNumber", "ProductId")
                        .IsUnique();

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Fanda.Models.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<Guid>("OrgId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.HasIndex("Code", "OrgId")
                        .IsUnique();

                    b.HasIndex("Name", "OrgId")
                        .IsUnique();

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Fanda.Models.UnitConversion", b =>
                {
                    b.Property<Guid>("FromUnitId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ToUnitId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("CalcStep")
                        .HasColumnType("tinyint unsigned");

                    b.Property<decimal>("Factor")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("varchar(1) CHARACTER SET utf8mb4");

                    b.HasKey("FromUnitId", "ToUnitId");

                    b.HasIndex("ToUnitId");

                    b.ToTable("UnitConversions");
                });

            modelBuilder.Entity("Fanda.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateLastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Fanda.Models.AccountYear", b =>
                {
                    b.HasOne("Fanda.Models.Organization", "Organization")
                        .WithMany("AccountYears")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.Bank", b =>
                {
                    b.HasOne("Fanda.Models.Address", "Address")
                        .WithOne("Bank")
                        .HasForeignKey("Fanda.Models.Bank", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Models.Contact", "Contact")
                        .WithOne("Bank")
                        .HasForeignKey("Fanda.Models.Bank", "ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Models.Ledger", "Ledger")
                        .WithOne("Bank")
                        .HasForeignKey("Fanda.Models.Bank", "LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.Buyer", b =>
                {
                    b.HasOne("Fanda.Models.Address", "Address")
                        .WithOne("Buyer")
                        .HasForeignKey("Fanda.Models.Buyer", "AddressId");

                    b.HasOne("Fanda.Models.Contact", "Contact")
                        .WithOne("Buyer")
                        .HasForeignKey("Fanda.Models.Buyer", "ContactId");
                });

            modelBuilder.Entity("Fanda.Models.Invoice", b =>
                {
                    b.HasOne("Fanda.Models.Buyer", "Buyer")
                        .WithMany("Invoices")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Fanda.Models.InvoiceCategory", "Category")
                        .WithMany("Invoices")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fanda.Models.Party", "Party")
                        .WithMany("Invoices")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fanda.Models.AccountYear", "AccountYear")
                        .WithMany("Invoices")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.InvoiceCategory", b =>
                {
                    b.HasOne("Fanda.Models.Organization", "Organization")
                        .WithMany("InvoiceCategories")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.InvoiceItem", b =>
                {
                    b.HasOne("Fanda.Models.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fanda.Models.Stock", "Stock")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fanda.Models.Unit", "Unit")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.Ledger", b =>
                {
                    b.HasOne("Fanda.Models.LedgerGroup", "LedgerGroup")
                        .WithMany("Ledgers")
                        .HasForeignKey("LedgerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fanda.Models.Organization", "Organization")
                        .WithMany("Ledgers")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fanda.Models.Ledger", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Models.LedgerBalance", b =>
                {
                    b.HasOne("Fanda.Models.Ledger", "Ledger")
                        .WithMany("LedgerBalances")
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fanda.Models.AccountYear", "AccountYear")
                        .WithMany("LedgerBalances")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.LedgerGroup", b =>
                {
                    b.HasOne("Fanda.Models.Organization", "Organization")
                        .WithMany("LedgerGroups")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fanda.Models.LedgerGroup", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Models.OrgAddress", b =>
                {
                    b.HasOne("Fanda.Models.Address", "Address")
                        .WithMany("OrgAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fanda.Models.Organization", "Organization")
                        .WithMany("OrgAddresses")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.OrgContact", b =>
                {
                    b.HasOne("Fanda.Models.Contact", "Contact")
                        .WithMany("OrgContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fanda.Models.Organization", "Organization")
                        .WithMany("OrgContacts")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.OrgUser", b =>
                {
                    b.HasOne("Fanda.Models.Organization", "Organization")
                        .WithMany("OrgUsers")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fanda.Models.User", "User")
                        .WithMany("OrgUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.OrgUserRole", b =>
                {
                    b.HasOne("Fanda.Models.Role", "Role")
                        .WithMany("OrgUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fanda.Models.OrgUser", "OrgUser")
                        .WithMany("OrgUserRoles")
                        .HasForeignKey("OrgId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.Party", b =>
                {
                    b.HasOne("Fanda.Models.PartyCategory", "Category")
                        .WithMany("Parties")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fanda.Models.Ledger", "Ledger")
                        .WithOne("Party")
                        .HasForeignKey("Fanda.Models.Party", "LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.PartyAddress", b =>
                {
                    b.HasOne("Fanda.Models.Address", "Address")
                        .WithMany("PartyAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fanda.Models.Party", "Party")
                        .WithMany("PartyAddresses")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.PartyCategory", b =>
                {
                    b.HasOne("Fanda.Models.Organization", "Organization")
                        .WithMany("PartyCategories")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.PartyContact", b =>
                {
                    b.HasOne("Fanda.Models.Contact", "Contact")
                        .WithMany("PartyContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fanda.Models.Party", "Party")
                        .WithMany("PartyContacts")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.Product", b =>
                {
                    b.HasOne("Fanda.Models.ProductBrand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Models.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fanda.Models.Organization", "Organization")
                        .WithMany("Products")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fanda.Models.ProductSegment", "Segment")
                        .WithMany("Products")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Models.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fanda.Models.ProductVariety", "Variety")
                        .WithMany("Products")
                        .HasForeignKey("VarietyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Models.ProductBrand", b =>
                {
                    b.HasOne("Fanda.Models.Organization", "Organization")
                        .WithMany("ProductBrands")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.ProductCategory", b =>
                {
                    b.HasOne("Fanda.Models.Organization", "Organization")
                        .WithMany("ProductCategories")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fanda.Models.ProductCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Fanda.Models.ProductIngredient", b =>
                {
                    b.HasOne("Fanda.Models.Product", "ChildProduct")
                        .WithMany("ChildIngredients")
                        .HasForeignKey("ChildProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fanda.Models.Product", "ParentProduct")
                        .WithMany("ParentIngredients")
                        .HasForeignKey("ParentProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fanda.Models.Unit", "Unit")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.ProductPricing", b =>
                {
                    b.HasOne("Fanda.Models.InvoiceCategory", "InvoiceCategory")
                        .WithMany("ProductPricings")
                        .HasForeignKey("InvoiceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Models.PartyCategory", "PartyCategory")
                        .WithMany("ProductPricings")
                        .HasForeignKey("PartyCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fanda.Models.Product", "Product")
                        .WithMany("ProductPricings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.ProductPricingRange", b =>
                {
                    b.HasOne("Fanda.Models.ProductPricing", "ProductPricing")
                        .WithMany("PricingRanges")
                        .HasForeignKey("PricingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.ProductSegment", b =>
                {
                    b.HasOne("Fanda.Models.Organization", "Organization")
                        .WithMany("ProductSegments")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.ProductVariety", b =>
                {
                    b.HasOne("Fanda.Models.Organization", "Organization")
                        .WithMany("ProductVarieties")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.RefreshToken", b =>
                {
                    b.HasOne("Fanda.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.Role", b =>
                {
                    b.HasOne("Fanda.Models.Organization", "Organization")
                        .WithMany("Roles")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.SerialNumber", b =>
                {
                    b.HasOne("Fanda.Models.AccountYear", "AccountYear")
                        .WithMany("SerialNumbers")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.Stock", b =>
                {
                    b.HasOne("Fanda.Models.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fanda.Models.Unit", "Unit")
                        .WithMany("Stocks")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.Unit", b =>
                {
                    b.HasOne("Fanda.Models.Organization", "Organization")
                        .WithMany("Units")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanda.Models.UnitConversion", b =>
                {
                    b.HasOne("Fanda.Models.Unit", "FromUnit")
                        .WithMany("FromUnitConversions")
                        .HasForeignKey("FromUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fanda.Models.Unit", "ToUnit")
                        .WithMany("ToUnitConversions")
                        .HasForeignKey("ToUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
